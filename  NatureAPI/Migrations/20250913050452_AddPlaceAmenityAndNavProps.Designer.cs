// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureAPI.Data;

#nullable disable

namespace NatureAPI.Migrations
{
    [DbContext(typeof(NatureDbContext))]
    [Migration("20250913050452_AddPlaceAmenityAndNavProps")]
    partial class AddPlaceAmenityAndNavProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NatureAPI.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baños"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Estacionamiento"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mirador"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Área de picnic"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Vista de las cascadas petrificadas",
                            PlaceId = 1,
                            Url = "https://i0.wp.com/www.turimexico.com/wp-content/uploads/2015/07/eehierveelagua.jpg?w=747&ssl=1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cascada de Tamul",
                            PlaceId = 2,
                            Url = "https://i0.wp.com/www.turimexico.com/wp-content/uploads/2015/07/eetamul.jpg?w=500&ssl=1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Iztaccíhuatl desde el parque",
                            PlaceId = 3,
                            Url = "https://www.gob.mx/cms/uploads/article/main_image/27513/blog_izta_popo.jpg"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Mirador",
                            CreatedAt = new DateTime(2025, 9, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Formaciones rocosas y cascadas petrificadas en Oaxaca.",
                            ElevationMeters = 1600,
                            EntryFee = 50.0,
                            Latitude = 16.899999999999999,
                            Longitude = -96.473100000000002,
                            Name = "Hierve el Agua",
                            OpeningHours = "08:00-18:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = false,
                            Category = "Cascada",
                            CreatedAt = new DateTime(2025, 9, 10, 9, 10, 0, 0, DateTimeKind.Unspecified),
                            Description = "Impresionante cascada en San Luis Potosí, acceso por sendero o lancha.",
                            ElevationMeters = 200,
                            EntryFee = 0.0,
                            Latitude = 21.322600000000001,
                            Longitude = -99.131900000000002,
                            Name = "Cascada de Tamul",
                            OpeningHours = "06:00-17:00"
                        },
                        new
                        {
                            Id = 3,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2025, 9, 10, 9, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gran parque nacional con miradores y senderos.",
                            ElevationMeters = 3500,
                            EntryFee = 0.0,
                            Latitude = 19.120000000000001,
                            Longitude = -98.626999999999995,
                            Name = "Parque Nacional Iztaccíhuatl-Popocatépetl",
                            OpeningHours = "00:00-23:59"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenities");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 3
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NatureAPI.Models.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Fácil",
                            DistanceKm = 1.2,
                            EstimatedTimeMinutes = 40,
                            IsLoop = false,
                            Name = "Sendero Mirador",
                            Path = "[(16.9,-96.4731),(16.901,-96.474)]",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Moderado",
                            DistanceKm = 6.5,
                            EstimatedTimeMinutes = 180,
                            IsLoop = false,
                            Name = "Ruta a Tamul (río + caminata)",
                            Path = "[(21.3226,-99.1319),(21.33,-99.14)]",
                            PlaceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Difícil",
                            DistanceKm = 3.3999999999999999,
                            EstimatedTimeMinutes = 120,
                            IsLoop = false,
                            Name = "Ascenso a mirador",
                            Path = "[(19.12,-98.627),(19.13,-98.63)]",
                            PlaceId = 3
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Photo", b =>
                {
                    b.HasOne("NatureAPI.Models.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.PlaceAmenity", b =>
                {
                    b.HasOne("NatureAPI.Models.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureAPI.Models.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Review", b =>
                {
                    b.HasOne("NatureAPI.Models.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Trail", b =>
                {
                    b.HasOne("NatureAPI.Models.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("NatureAPI.Models.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
